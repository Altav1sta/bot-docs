<Type Name="ExpressionFunctions" FullName="AdaptiveExpressions.ExpressionFunctions">
  <TypeSignature Language="C#" Value="public static class ExpressionFunctions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionFunctions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:AdaptiveExpressions.ExpressionFunctions" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionFunctions" />
  <TypeSignature Language="F#" Value="type ExpressionFunctions = class" />
  <AssemblyInfo>
    <AssemblyName>AdaptiveExpressions</AssemblyName>
    <AssemblyVersion>4.9.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Definition of default built-in functions for expressions.
             </summary>
    <remarks>
             These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
             with a few extensions like infix operators for math, logic and comparisons.
            
             This class also has some methods that are useful to use when defining custom functions.
             You can always construct a <see cref="T:AdaptiveExpressions.ExpressionEvaluator" /> directly which gives the maximum amount of control over validation and evaluation.
             Validators are static checkers that should throw an exception if something is not valid statically.
             Evaluators are called to evaluate an expression and should try not to throw.
             There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessIndex">
      <MemberSignature Language="C#" Value="public static (object,string) AccessIndex (object instance, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;object, string&gt; AccessIndex(object instance, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.AccessIndex(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AccessIndex (instance As Object, index As Integer) As ValueTuple(Of Object, String)" />
      <MemberSignature Language="F#" Value="static member AccessIndex : obj * int -&gt; ValueTuple&lt;obj, string&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.AccessIndex (instance, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Object,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "value", "error" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instance">Instance with property.</param>
        <param name="index">Property to lookup.</param>
        <summary>
            Lookup an index property of instance.
            </summary>
        <returns>Value and error information if any.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate Apply (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate Apply(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.Apply(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Apply (function As Func(Of IReadOnlyList(Of Object), Object), Optional verify As ExpressionFunctions.VerifyExpression = null) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member Apply : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.ExpressionFunctions.Apply (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Function to apply.</param>
        <param name="verify">Function to check each arg for validity.</param>
        <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySequence">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplySequence (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplySequence(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ApplySequence(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplySequence (function As Func(Of IReadOnlyList(Of Object), Object), Optional verify As ExpressionFunctions.VerifyExpression = null) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplySequence : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.ExpressionFunctions.ApplySequence (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Function to apply.</param>
        <param name="verify">Function to check each arg for validity.</param>
        <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplySequenceWithError">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplySequenceWithError (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,ValueTuple&lt;object,string&gt;&gt; function, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplySequenceWithError(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, valuetype System.ValueTuple`2&lt;object, string&gt;&gt; function, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ApplySequenceWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplySequenceWithError (function As Func(Of IReadOnlyList(Of Object), ValueTuple(Of Object, String)), Optional verify As ExpressionFunctions.VerifyExpression = null) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplySequenceWithError : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, ValueTuple&lt;obj, string&gt;&gt; * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.ExpressionFunctions.ApplySequenceWithError (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.ValueTuple&lt;System.Object,System.String&gt;&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Function to apply.</param>
        <param name="verify">Function to check each arg for validity.</param>
        <summary>
            Generate an expression delegate that applies function on the accumulated value after verifying all children.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyWithError">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithError (Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,ValueTuple&lt;object,string&gt;&gt; function, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.EvaluateExpressionDelegate ApplyWithError(class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, valuetype System.ValueTuple`2&lt;object, string&gt;&gt; function, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ApplyWithError(System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.ValueTuple{System.Object,System.String}},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ApplyWithError (function As Func(Of IReadOnlyList(Of Object), ValueTuple(Of Object, String)), Optional verify As ExpressionFunctions.VerifyExpression = null) As EvaluateExpressionDelegate" />
      <MemberSignature Language="F#" Value="static member ApplyWithError : Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, ValueTuple&lt;obj, string&gt;&gt; * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.EvaluateExpressionDelegate" Usage="AdaptiveExpressions.ExpressionFunctions.ApplyWithError (function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.EvaluateExpressionDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.ValueTuple&lt;System.Object,System.String&gt;&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="function">Function to apply.</param>
        <param name="verify">Function to check each arg for validity.</param>
        <summary>
            Generate an expression delegate that applies function after verifying all children.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparison">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator Comparison (string type, Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,bool&gt; function, AdaptiveExpressions.ValidateExpressionDelegate validator, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator Comparison(string type, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, bool&gt; function, class AdaptiveExpressions.ValidateExpressionDelegate validator, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.Comparison(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Boolean},AdaptiveExpressions.ValidateExpressionDelegate,AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Comparison (type As String, function As Func(Of IReadOnlyList(Of Object), Boolean), validator As ValidateExpressionDelegate, Optional verify As ExpressionFunctions.VerifyExpression = null) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member Comparison : string * Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, bool&gt; * AdaptiveExpressions.ValidateExpressionDelegate * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.Comparison (type, function, validator, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Boolean&gt;" />
        <Parameter Name="validator" Type="AdaptiveExpressions.ValidateExpressionDelegate" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Function to apply.</param>
        <param name="validator">Function to validate expression.</param>
        <param name="verify">Function to verify arguments to expression.</param>
        <summary>
            Comparison operators.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>
            A comparison operator returns false if the comparison is false, or there is an error.  This prevents errors from short-circuiting boolean expressions.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDateTimeFormat">
      <MemberSignature Language="C#" Value="public static readonly string DefaultDateTimeFormat;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultDateTimeFormat" />
      <MemberSignature Language="DocId" Value="F:AdaptiveExpressions.ExpressionFunctions.DefaultDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultDateTimeFormat As String " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultDateTimeFormat : string" Usage="AdaptiveExpressions.ExpressionFunctions.DefaultDateTimeFormat" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default date time format string.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateChildren">
      <MemberSignature Language="C#" Value="public static (System.Collections.Generic.IReadOnlyList&lt;object&gt;,string) EvaluateChildren (AdaptiveExpressions.Expression expression, AdaptiveExpressions.Memory.IMemory state, AdaptiveExpressions.Options options, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, string&gt; EvaluateChildren(class AdaptiveExpressions.Expression expression, class AdaptiveExpressions.Memory.IMemory state, class AdaptiveExpressions.Options options, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.EvaluateChildren(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options,AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EvaluateChildren (expression As Expression, state As IMemory, options As Options, Optional verify As ExpressionFunctions.VerifyExpression = null) As ValueTuple(Of IReadOnlyList(Of Object), String)" />
      <MemberSignature Language="F#" Value="static member EvaluateChildren : AdaptiveExpressions.Expression * AdaptiveExpressions.Memory.IMemory * AdaptiveExpressions.Options * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; ValueTuple&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, string&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.EvaluateChildren (expression, state, options, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { null, "error" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="state" Type="AdaptiveExpressions.Memory.IMemory" />
        <Parameter Name="options" Type="AdaptiveExpressions.Options" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression with children.</param>
        <param name="state">Global state.</param>
        <param name="options">Options used in evaluation. </param>
        <param name="verify">Optional function to verify each child's result.</param>
        <summary>
            Evaluate expression children and return them.
            </summary>
        <returns>List of child values or error message.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultivariateNumeric">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator MultivariateNumeric (string type, Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function, AdaptiveExpressions.ExpressionFunctions.VerifyExpression verify = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator MultivariateNumeric(string type, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function, class AdaptiveExpressions.ExpressionFunctions/VerifyExpression verify) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.MultivariateNumeric(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object},AdaptiveExpressions.ExpressionFunctions.VerifyExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultivariateNumeric (type As String, function As Func(Of IReadOnlyList(Of Object), Object), Optional verify As ExpressionFunctions.VerifyExpression = null) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member MultivariateNumeric : string * Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; * AdaptiveExpressions.ExpressionFunctions.VerifyExpression -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.MultivariateNumeric (type, function, verify)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
        <Parameter Name="verify" Type="AdaptiveExpressions.ExpressionFunctions+VerifyExpression" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Function to apply.</param>
        <param name="verify">Function to verify arguments.</param>
        <summary>
            Numeric operators that can have 2 or more args.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Numeric">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator Numeric (string type, Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator Numeric(string type, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.Numeric(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Numeric (type As String, function As Func(Of IReadOnlyList(Of Object), Object)) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member Numeric : string * Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.Numeric (type, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Function to apply.</param>
        <summary>
            Numeric operators that can have 1 or more args.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumericOrCollection">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator NumericOrCollection (string type, Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator NumericOrCollection(string type, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.NumericOrCollection(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NumericOrCollection (type As String, function As Func(Of IReadOnlyList(Of Object), Object)) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member NumericOrCollection : string * Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.NumericOrCollection (type, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Function to apply.</param>
        <summary>
            Numeric or Collection operators that can have 1 or more args. It can be apply numeric values or a collection of numeric
            values, or a mixing of  numeric values and a collection.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Randomizer">
      <MemberSignature Language="C#" Value="public static readonly Random Randomizer;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Random Randomizer" />
      <MemberSignature Language="DocId" Value="F:AdaptiveExpressions.ExpressionFunctions.Randomizer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Randomizer As Random " />
      <MemberSignature Language="F#" Value=" staticval mutable Randomizer : Random" Usage="AdaptiveExpressions.ExpressionFunctions.Randomizer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Random</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Random number generator used for expressions.
            </summary>
        <remarks>This is exposed so that you can explicitly seed the random number generator for tests.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveValue">
      <MemberSignature Language="C#" Value="public static object ResolveValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ResolveValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ResolveValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResolveValue (obj As Object) As Object" />
      <MemberSignature Language="F#" Value="static member ResolveValue : obj -&gt; obj" Usage="AdaptiveExpressions.ExpressionFunctions.ResolveValue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Input object.</param>
        <summary>
            Convert constant JValue to base type value.
            </summary>
        <returns>Corresponding base type if input is a JValue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public static (object,string) SetProperty (object instance, string property, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;object, string&gt; SetProperty(object instance, string property, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.SetProperty(System.Object,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetProperty (instance As Object, property As String, value As Object) As ValueTuple(Of Object, String)" />
      <MemberSignature Language="F#" Value="static member SetProperty : obj * string * obj -&gt; ValueTuple&lt;obj, string&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.SetProperty (instance, property, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.Object,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "result", "error" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="property" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Given instance.</param>
        <param name="property">Property be set.</param>
        <param name="value">Value be set.</param>
        <summary>
            Set the property into a given instance.
            </summary>
        <returns>Value and error information if any.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandardFunctions">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Generic.IDictionary&lt;string,AdaptiveExpressions.ExpressionEvaluator&gt; StandardFunctions;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.Generic.IDictionary`2&lt;string, class AdaptiveExpressions.ExpressionEvaluator&gt; StandardFunctions" />
      <MemberSignature Language="DocId" Value="F:AdaptiveExpressions.ExpressionFunctions.StandardFunctions" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StandardFunctions As IDictionary(Of String, ExpressionEvaluator) " />
      <MemberSignature Language="F#" Value=" staticval mutable StandardFunctions : System.Collections.Generic.IDictionary&lt;string, AdaptiveExpressions.ExpressionEvaluator&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.StandardFunctions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,AdaptiveExpressions.ExpressionEvaluator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Read only Dictionary of built in functions.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringTransform">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator StringTransform (string type, Func&lt;System.Collections.Generic.IReadOnlyList&lt;object&gt;,object&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator StringTransform(string type, class System.Func`2&lt;class System.Collections.Generic.IReadOnlyList`1&lt;object&gt;, object&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.StringTransform(System.String,System.Func{System.Collections.Generic.IReadOnlyList{System.Object},System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StringTransform (type As String, function As Func(Of IReadOnlyList(Of Object), Object)) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member StringTransform : string * Func&lt;System.Collections.Generic.IReadOnlyList&lt;obj&gt;, obj&gt; -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.StringTransform (type, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.Collections.Generic.IReadOnlyList&lt;System.Object&gt;,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Function to apply.</param>
        <summary>
            Transform a string into another string.
            </summary>
        <returns>Delegate for evaluating an expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeTransform">
      <MemberSignature Language="C#" Value="public static AdaptiveExpressions.ExpressionEvaluator TimeTransform (string type, Func&lt;DateTime,int,DateTime&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AdaptiveExpressions.ExpressionEvaluator TimeTransform(string type, class System.Func`3&lt;valuetype System.DateTime, int32, valuetype System.DateTime&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.TimeTransform(System.String,System.Func{System.DateTime,System.Int32,System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TimeTransform (type As String, function As Func(Of DateTime, Integer, DateTime)) As ExpressionEvaluator" />
      <MemberSignature Language="F#" Value="static member TimeTransform : string * Func&lt;DateTime, int, DateTime&gt; -&gt; AdaptiveExpressions.ExpressionEvaluator" Usage="AdaptiveExpressions.ExpressionFunctions.TimeTransform (type, function)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AdaptiveExpressions.ExpressionEvaluator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="function" Type="System.Func&lt;System.DateTime,System.Int32,System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="type">Expression type.</param>
        <param name="function">Transformer.</param>
        <summary>
            Transform a date-time to another date-time.
            </summary>
        <returns>Delegate for evaluating expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAccessProperty">
      <MemberSignature Language="C#" Value="public static bool TryAccessProperty (object instance, string property, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAccessProperty(object instance, string property, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.TryAccessProperty(System.Object,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAccessProperty (instance As Object, property As String, ByRef value As Object) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryAccessProperty : obj * string * obj -&gt; bool" Usage="AdaptiveExpressions.ExpressionFunctions.TryAccessProperty (instance, property, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="property" Type="System.String" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="instance">Instance with property.</param>
        <param name="property">Property to lookup.</param>
        <param name="value">Value of property.</param>
        <summary>
            Lookup a property in IDictionary, JObject or through reflection.
            </summary>
        <returns>True if property is present and binds value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAccumulatePath">
      <MemberSignature Language="C#" Value="public static (string,AdaptiveExpressions.Expression,string) TryAccumulatePath (AdaptiveExpressions.Expression expression, AdaptiveExpressions.Memory.IMemory state, AdaptiveExpressions.Options options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`3&lt;string, class AdaptiveExpressions.Expression, string&gt; TryAccumulatePath(class AdaptiveExpressions.Expression expression, class AdaptiveExpressions.Memory.IMemory state, class AdaptiveExpressions.Options options) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.TryAccumulatePath(AdaptiveExpressions.Expression,AdaptiveExpressions.Memory.IMemory,AdaptiveExpressions.Options)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAccumulatePath (expression As Expression, state As IMemory, options As Options) As ValueTuple(Of String, Expression, String)" />
      <MemberSignature Language="F#" Value="static member TryAccumulatePath : AdaptiveExpressions.Expression * AdaptiveExpressions.Memory.IMemory * AdaptiveExpressions.Options -&gt; ValueTuple&lt;string, AdaptiveExpressions.Expression, string&gt;" Usage="AdaptiveExpressions.ExpressionFunctions.TryAccumulatePath (expression, state, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ValueTuple&lt;System.String,AdaptiveExpressions.Expression,System.String&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "path", "left", "error" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="state" Type="AdaptiveExpressions.Memory.IMemory" />
        <Parameter Name="options" Type="AdaptiveExpressions.Options" />
      </Parameters>
      <Docs>
        <param name="expression">expression.</param>
        <param name="state">scope.</param>
        <param name="options">Options used in evaluation. </param>
        <summary>
            Try to accumulate the path from an Accessor or Element, from right to left.
            </summary>
        <returns>return the accumulated path and the expression left unable to accumulate.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseList">
      <MemberSignature Language="C#" Value="public static bool TryParseList (object value, out System.Collections.IList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseList(object value, [out] class System.Collections.IList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.TryParseList(System.Object,System.Collections.IList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseList (value As Object, ByRef list As IList) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseList : obj * IList -&gt; bool" Usage="AdaptiveExpressions.ExpressionFunctions.TryParseList (value, list)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="list" Type="System.Collections.IList" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">Value to coerce.</param>
        <param name="list">IList if found.</param>
        <summary>
            Try to coerce object to IList.
            </summary>
        <returns>true if found IList.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateArityAndAnyType">
      <MemberSignature Language="C#" Value="public static void ValidateArityAndAnyType (AdaptiveExpressions.Expression expression, int minArity, int maxArity, AdaptiveExpressions.ReturnType returnType = AdaptiveExpressions.ReturnType.Object);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateArityAndAnyType(class AdaptiveExpressions.Expression expression, int32 minArity, int32 maxArity, valuetype AdaptiveExpressions.ReturnType returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateArityAndAnyType(AdaptiveExpressions.Expression,System.Int32,System.Int32,AdaptiveExpressions.ReturnType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateArityAndAnyType (expression As Expression, minArity As Integer, maxArity As Integer, Optional returnType As ReturnType = AdaptiveExpressions.ReturnType.Object)" />
      <MemberSignature Language="F#" Value="static member ValidateArityAndAnyType : AdaptiveExpressions.Expression * int * int * AdaptiveExpressions.ReturnType -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateArityAndAnyType (expression, minArity, maxArity, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="minArity" Type="System.Int32" />
        <Parameter Name="maxArity" Type="System.Int32" />
        <Parameter Name="returnType" Type="AdaptiveExpressions.ReturnType" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <param name="minArity">Minimum number of children.</param>
        <param name="maxArity">Maximum number of children.</param>
        <param name="returnType">Allowed return types for children.</param>
        <summary>
            Validate that expression has a certain number of children that are of any of the supported types.
            </summary>
        <remarks>
            If a child has a return type of Object then validation will happen at runtime.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateAtLeastOne">
      <MemberSignature Language="C#" Value="public static void ValidateAtLeastOne (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateAtLeastOne(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateAtLeastOne(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateAtLeastOne (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateAtLeastOne : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateAtLeastOne expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate at least 1 argument of any type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinary">
      <MemberSignature Language="C#" Value="public static void ValidateBinary (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinary(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinary(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinary (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinary : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateBinary expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate there are two children.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinaryNumber">
      <MemberSignature Language="C#" Value="public static void ValidateBinaryNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinaryNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinaryNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinaryNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate 2 numeric arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateBinaryNumberOrString">
      <MemberSignature Language="C#" Value="public static void ValidateBinaryNumberOrString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateBinaryNumberOrString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumberOrString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateBinaryNumberOrString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateBinaryNumberOrString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateBinaryNumberOrString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate there are 2 numeric or string arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNumber">
      <MemberSignature Language="C#" Value="public static void ValidateNumber (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateNumber(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateNumber(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateNumber (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateNumber : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateNumber expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate 1 or more numeric arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrder">
      <MemberSignature Language="C#" Value="public static void ValidateOrder (AdaptiveExpressions.Expression expression, AdaptiveExpressions.ReturnType[] optional, params AdaptiveExpressions.ReturnType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateOrder(class AdaptiveExpressions.Expression expression, valuetype AdaptiveExpressions.ReturnType[] optional, valuetype AdaptiveExpressions.ReturnType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateOrder(AdaptiveExpressions.Expression,AdaptiveExpressions.ReturnType[],AdaptiveExpressions.ReturnType[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateOrder (expression As Expression, optional As ReturnType(), ParamArray types As ReturnType())" />
      <MemberSignature Language="F#" Value="static member ValidateOrder : AdaptiveExpressions.Expression * AdaptiveExpressions.ReturnType[] * AdaptiveExpressions.ReturnType[] -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateOrder (expression, optional, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="optional" Type="AdaptiveExpressions.ReturnType[]" />
        <Parameter Name="types" Type="AdaptiveExpressions.ReturnType[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <param name="optional">Optional types in order.</param>
        <param name="types">Expected types in order.</param>
        <summary>
            Validate the number and type of arguments to a function.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateString">
      <MemberSignature Language="C#" Value="public static void ValidateString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate 1 or more string arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTwoOrMoreThanTwoNumbers">
      <MemberSignature Language="C#" Value="public static void ValidateTwoOrMoreThanTwoNumbers (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateTwoOrMoreThanTwoNumbers(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateTwoOrMoreThanTwoNumbers(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateTwoOrMoreThanTwoNumbers (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateTwoOrMoreThanTwoNumbers : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateTwoOrMoreThanTwoNumbers expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate 2 or more than 2 numeric arguments.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnary">
      <MemberSignature Language="C#" Value="public static void ValidateUnary (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnary(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnary(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnary (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnary : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateUnary expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate there is a single argument.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryBoolean">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryBoolean (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryBoolean(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnaryBoolean(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryBoolean (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryBoolean : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateUnaryBoolean expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate there is a single boolean argument.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUnaryString">
      <MemberSignature Language="C#" Value="public static void ValidateUnaryString (AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateUnaryString(class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.ValidateUnaryString(AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateUnaryString (expression As Expression)" />
      <MemberSignature Language="F#" Value="static member ValidateUnaryString : AdaptiveExpressions.Expression -&gt; unit" Usage="AdaptiveExpressions.ExpressionFunctions.ValidateUnaryString expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">Expression to validate.</param>
        <summary>
            Validate there is a single string argument.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyBoolean">
      <MemberSignature Language="C#" Value="public static string VerifyBoolean (object value, AdaptiveExpressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyBoolean(object value, class AdaptiveExpressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyBoolean(System.Object,AdaptiveExpressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyBoolean (value As Object, expression As Expression) As String" />
      <MemberSignature Language="F#" Value="static member VerifyBoolean : obj * AdaptiveExpressions.Expression -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyBoolean (value, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <summary>
            Verify value is boolean.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyContainer">
      <MemberSignature Language="C#" Value="public static string VerifyContainer (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyContainer(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyContainer(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyContainer (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyContainer : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyContainer (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value contains elements.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyInteger">
      <MemberSignature Language="C#" Value="public static string VerifyInteger (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyInteger(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyInteger(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyInteger (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyInteger : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyInteger (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is an integer.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyList">
      <MemberSignature Language="C#" Value="public static string VerifyList (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyList(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyList(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyList (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyList : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyList (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value contains elements.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNotNull">
      <MemberSignature Language="C#" Value="public static string VerifyNotNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNotNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNotNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNotNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNotNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNotNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is not null.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumber">
      <MemberSignature Language="C#" Value="public static string VerifyNumber (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumber(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumber (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumber : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNumber (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is numeric.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumberOrString">
      <MemberSignature Language="C#" Value="public static string VerifyNumberOrString (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumberOrString(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrString(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumberOrString (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumberOrString : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrString (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is a number or string.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumberOrStringOrNull">
      <MemberSignature Language="C#" Value="public static string VerifyNumberOrStringOrNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumberOrStringOrNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumberOrStringOrNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumberOrStringOrNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNumberOrStringOrNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is a number or string or null.
            </summary>
        <returns>Error.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumericList">
      <MemberSignature Language="C#" Value="public static string VerifyNumericList (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumericList(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumericList(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumericList (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumericList : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNumericList (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is numeric list.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyNumericListOrNumber">
      <MemberSignature Language="C#" Value="public static string VerifyNumericListOrNumber (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyNumericListOrNumber(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyNumericListOrNumber(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyNumericListOrNumber (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyNumericListOrNumber : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyNumericListOrNumber (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is a numeric list or a numeric value.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public static string VerifyString (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyString(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyString(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyString (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyString : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyString (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Value to check.</param>
        <param name="expression">Expression that led to value.</param>
        <param name="number">No function.</param>
        <summary>
            Verify value is a string.
            </summary>
        <returns>Error or null if valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyStringOrNull">
      <MemberSignature Language="C#" Value="public static string VerifyStringOrNull (object value, AdaptiveExpressions.Expression expression, int number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyStringOrNull(object value, class AdaptiveExpressions.Expression expression, int32 number) cil managed" />
      <MemberSignature Language="DocId" Value="M:AdaptiveExpressions.ExpressionFunctions.VerifyStringOrNull(System.Object,AdaptiveExpressions.Expression,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyStringOrNull (value As Object, expression As Expression, number As Integer) As String" />
      <MemberSignature Language="F#" Value="static member VerifyStringOrNull : obj * AdaptiveExpressions.Expression * int -&gt; string" Usage="AdaptiveExpressions.ExpressionFunctions.VerifyStringOrNull (value, expression, number)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>AdaptiveExpressions</AssemblyName>
        <AssemblyVersion>4.9.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="expression" Type="AdaptiveExpressions.Expression" />
        <Parameter Name="number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">instance.</param>
        <param name="expression">expression.</param>
        <param name="number">number.</param>
        <summary>
            Verify an object is neither a string nor null.
            </summary>
        <returns>error message.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
